openapi: 3.0.1
info:
  title: nursery-api
  version: 0.0.6
paths:
  /owner/:
    post:
      operationId: create
      tags:
        - OwnerService
      parameters: []
      responses:
        '204':
          description: ''
        '400':
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      _error:
                        type: string
                        enum:
                          - OwnerAlreadyExistsError
                      OwnerAlreadyExistsError:
                        $ref: '#/components/schemas/OwnerOwnerAlreadyExistsError'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OwnerCreateOwnerRequest'
  /owner/{ownerId}:
    put:
      operationId: update
      tags:
        - OwnerService
      parameters:
        - name: ownerId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/OwnerOwnerId'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnerOwner'
        '404':
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      _error:
                        type: string
                        enum:
                          - OwnerNotFoundError
                      OwnerNotFoundError:
                        $ref: '#/components/schemas/OwnerOwnerNotFoundError'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OwnerUpdateOwnerRequest'
  /tokens/create:
    post:
      operationId: create
      tags:
        - TokenService
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenCreateTokenResponse'
        '404':
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      _error:
                        type: string
                        enum:
                          - OwnerNotFoundError
                      OwnerNotFoundError:
                        $ref: '#/components/schemas/OwnerOwnerNotFoundError'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenCreateTokenRequest'
  /tokens/metadata:
    post:
      operationId: getTokenMetadata
      tags:
        - TokenService
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenTokenMetadata'
        '404':
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      _error:
                        type: string
                        enum:
                          - TokenNotFoundError
                      TokenNotFoundError:
                        $ref: '#/components/schemas/TokenTokenNotFoundError'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TokenGetTokenMetadataRequest'
  /tokens/owner/{ownerId}:
    get:
      operationId: getTokensForOwner
      tags:
        - TokenService
      parameters:
        - name: ownerId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/OwnerOwnerId'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TokenTokenMetadata'
        '404':
          description: ''
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      _error:
                        type: string
                        enum:
                          - OwnerNotFoundError
                      OwnerNotFoundError:
                        $ref: '#/components/schemas/OwnerOwnerNotFoundError'
components:
  schemas:
    OwnerOwnerId:
      type: string
      description: Unique id for an owner.
    OwnerCreateOwnerRequest:
      type: object
      properties:
        ownerId:
          $ref: '#/components/schemas/OwnerOwnerId'
        data: {}
      required:
        - ownerId
        - data
    OwnerUpdateOwnerRequest:
      type: object
      properties:
        data: {}
      required:
        - data
    OwnerOwner:
      type: object
      properties:
        ownerId:
          $ref: '#/components/schemas/OwnerOwnerId'
        data: {}
      required:
        - ownerId
        - data
    TokenTokenId:
      type: string
    TokenCreateTokenRequest:
      type: object
      properties:
        ownerId:
          $ref: '#/components/schemas/OwnerOwnerId'
        description:
          type: string
      required:
        - ownerId
    TokenCreateTokenResponse:
      type: object
      properties:
        token:
          type: string
        tokenId:
          $ref: '#/components/schemas/TokenTokenId'
      required:
        - token
        - tokenId
    TokenGetTokenMetadataRequest:
      type: object
      properties:
        token:
          type: string
      required:
        - token
    TokenTokenMetadata:
      type: object
      properties:
        tokenId:
          $ref: '#/components/schemas/TokenTokenId'
        ownerId:
          $ref: '#/components/schemas/OwnerOwnerId'
        description:
          type: string
        createdTime:
          type: string
          format: date-time
        status:
          $ref: '#/components/schemas/TokenTokenStatus'
      required:
        - tokenId
        - ownerId
        - createdTime
        - status
    TokenTokenStatus:
      oneOf:
        - type: object
          properties:
            type: {}
        - type: object
          properties:
            type: {}
        - type: object
          properties:
            type: {}
    OwnerOwnerAlreadyExistsError: {}
    OwnerOwnerNotFoundError: {}
    TokenTokenNotFoundError: {}
  securitySchemes: {}
